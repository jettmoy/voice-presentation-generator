from pydantic import BaseModel, Field
from typing import List, Optional
from icecream import ic

class BaseModelConfig(BaseModel):
    class Config:
        extra = "forbid"  # Disallow extra fields


class Question(BaseModelConfig):
    question: str


class Instructions(BaseModelConfig):
    instructions: str = Field(
        description="The instructions for the LLM on how to make slides"
    )


class SlideContent(BaseModelConfig):
    heading: str = Field(description="Heading of the slide")
    body: str = Field(description="Text of the slide")


class SlideStyle(BaseModelConfig):
    background: str | None = Field(
        default=None,
        description="Background color of the slide. All CSS color formats are supported, including hex values, keywords, rgba() or hsl(). All CSS gradient formats are supported, including linear-gradient, radial-gradient and conic-gradient. Example: 'linear-gradient(to bottom, #f00, #00f)'",
    )


class Slide(BaseModelConfig):
    id: str = Field(description="The id of the slide")
    content: SlideContent = Field(description="The content of the slide")
    style: SlideStyle | None = Field(default=None, description="The style of the slide")
    children: Optional[List[SlideContent]] = Field(
        description="Slides to further elaborate on the main slide"
    )


class Slides(BaseModelConfig):    
    slides: List[Slide] = Field(description="The slides generated by the LLM")
    


def generate_slide_html(content: SlideContent) -> str:
    """Recursively generate HTML for a slide and its children."""
    html = ""
    if content.heading:
        html += f"<h1>{content.heading}</h1>"
    if content.body:
        html += f"<p>{content.body}</p>"

    return html


def generate_slide_attributes(slide: SlideStyle) -> str:
    """Generate HTML attributes for a slide."""
    attributes = []
    if slide is None:
        return ""
    if slide.background:
        attributes.append(f"data-background-color='{slide.background}'")
    return " ".join(attributes)


def generate_presentation_html(slides: List[Slide]) -> str:
    """Generate HTML for all slides in the presentation."""
    html = ""
    for slide in slides:
        ic(slide)
        html += f"<section {generate_slide_attributes(slide.style)}>"

        # Add bullets as simple paragraphs instead of nested sections
        if slide.children:
            # Add section for first slide
            html += f"<section {generate_slide_attributes(slide.style)}>"
            html += generate_slide_html(slide.content)
            html += "</section>"

            # Add sections for child slides
            for child in slide.children:
                html += f"<section>"
                html += f"<h2>{child.heading}</h2>"
                html += f"<p>{child.body}</p>"
                html += "</section>"
            html += "</section>"
        else:
            html += generate_slide_html(slide.content)

        html += "</section>"
    return html
